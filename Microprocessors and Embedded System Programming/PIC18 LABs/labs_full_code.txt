;LAB 1


; PIC18F4550 Configuration Bit Settings

; Assembly source line config statements

#include "p18f4550.inc"

; CONFIG1L
  CONFIG  PLLDIV = 1            ; PLL Prescaler Selection bits (No prescale (4 MHz oscillator input drives PLL directly))
  CONFIG  CPUDIV = OSC1_PLL2    ; System Clock Postscaler Selection bits ([Primary Oscillator Src: /1][96 MHz PLL Src: /2])
  CONFIG  USBDIV = 1            ; USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1) (USB clock source comes directly from the primary oscillator block with no postscale)

; CONFIG1H
  CONFIG  FOSC = HS             ; Oscillator Selection bits (HS oscillator (HS))
  CONFIG  FCMEN = OFF           ; Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
  CONFIG  IESO = OFF            ; Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

; CONFIG2L
  CONFIG  PWRT = OFF            ; Power-up Timer Enable bit (PWRT disabled)
  CONFIG  BOR = OFF             ; Brown-out Reset Enable bits (Brown-out Reset disabled in hardware and software)
  CONFIG  BORV = 3              ; Brown-out Reset Voltage bits (Minimum setting 2.05V)
  CONFIG  VREGEN = OFF          ; USB Voltage Regulator Enable bit (USB voltage regulator disabled)

; CONFIG2H
  CONFIG  WDT = OFF             ; Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
  CONFIG  WDTPS = 32768         ; Watchdog Timer Postscale Select bits (1:32768)

; CONFIG3H
  CONFIG  CCP2MX = ON           ; CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
  CONFIG  PBADEN = OFF          ; PORTB A/D Enable bit (PORTB<4:0> pins are configured as digital I/O on Reset)
  CONFIG  LPT1OSC = OFF         ; Low-Power Timer 1 Oscillator Enable bit (Timer1 configured for higher power operation)
  CONFIG  MCLRE = ON            ; MCLR Pin Enable bit (MCLR pin enabled; RE3 input pin disabled)

; CONFIG4L
  CONFIG  STVREN = OFF          ; Stack Full/Underflow Reset Enable bit (Stack full/underflow will not cause Reset)
  CONFIG  LVP = ON              ; Single-Supply ICSP Enable bit (Single-Supply ICSP enabled)
  CONFIG  ICPRT = OFF           ; Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit (ICPORT disabled)
  CONFIG  XINST = OFF           ; Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

; CONFIG5L
  CONFIG  CP0 = OFF             ; Code Protection bit (Block 0 (000800-001FFFh) is not code-protected)
  CONFIG  CP1 = OFF             ; Code Protection bit (Block 1 (002000-003FFFh) is not code-protected)
  CONFIG  CP2 = OFF             ; Code Protection bit (Block 2 (004000-005FFFh) is not code-protected)
  CONFIG  CP3 = OFF             ; Code Protection bit (Block 3 (006000-007FFFh) is not code-protected)

; CONFIG5H
  CONFIG  CPB = OFF             ; Boot Block Code Protection bit (Boot block (000000-0007FFh) is not code-protected)
  CONFIG  CPD = OFF             ; Data EEPROM Code Protection bit (Data EEPROM is not code-protected)

; CONFIG6L
  CONFIG  WRT0 = OFF            ; Write Protection bit (Block 0 (000800-001FFFh) is not write-protected)
  CONFIG  WRT1 = OFF            ; Write Protection bit (Block 1 (002000-003FFFh) is not write-protected)
  CONFIG  WRT2 = OFF            ; Write Protection bit (Block 2 (004000-005FFFh) is not write-protected)
  CONFIG  WRT3 = OFF            ; Write Protection bit (Block 3 (006000-007FFFh) is not write-protected)

; CONFIG6H
  CONFIG  WRTC = OFF            ; Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) are not write-protected)
  CONFIG  WRTB = OFF            ; Boot Block Write Protection bit (Boot block (000000-0007FFh) is not write-protected)
  CONFIG  WRTD = OFF            ; Data EEPROM Write Protection bit (Data EEPROM is not write-protected)

; CONFIG7L
  CONFIG  EBTR0 = OFF           ; Table Read Protection bit (Block 0 (000800-001FFFh) is not protected from table reads executed in other blocks)
  CONFIG  EBTR1 = OFF           ; Table Read Protection bit (Block 1 (002000-003FFFh) is not protected from table reads executed in other blocks)
  CONFIG  EBTR2 = OFF           ; Table Read Protection bit (Block 2 (004000-005FFFh) is not protected from table reads executed in other blocks)
  CONFIG  EBTR3 = OFF           ; Table Read Protection bit (Block 3 (006000-007FFFh) is not protected from table reads executed in other blocks)

; CONFIG7H
  CONFIG  EBTRB = OFF           ; Boot Block Table Read Protection bit (Boot block (000000-0007FFh) is not protected from table reads executed in other blocks)

  
Loop1 EQU 00
Loop2 EQU 01
Loop3 EQU 02
  

ORG 00H
 CLRF TRISA
 CLRF TRISB
 CLRF TRISC
 CLRF TRISD
 CLRF TRISE
 
 CLRF PORTA
 CLRF PORTB
 CLRF PORTC
 CLRF PORTD
 CLRF PORTE
 
 AGAIN:
    MOVLW B'00000001'
    MOVWF PORTA
    CALL DELAY
    MOVLW B'00000010'
    MOVWF PORTA
    CALL DELAY
    MOVLW B'00000100'
    MOVWF PORTA
    CALL DELAY
    MOVLW B'00001000'
    MOVWF PORTA
    CALL DELAY
    MOVLW B'00010000'
    MOVWF PORTA
    CALL DELAY
    MOVLW B'00100000'
    MOVWF PORTA
    CALL DELAY
    MOVLW B'01000000'
    MOVWF PORTA
    CALL DELAY
    CLRF PORTA
    
    MOVLW B'00000001'
    MOVWF PORTB
    CALL DELAY
    MOVLW B'00000010'
    MOVWF PORTB
    CALL DELAY
    MOVLW B'00000100'
    MOVWF PORTB
    CALL DELAY
    MOVLW B'00001000'
    MOVWF PORTB
    CALL DELAY
    MOVLW B'00010000'
    MOVWF PORTB
    CALL DELAY
    MOVLW B'00100000'
    MOVWF PORTB
    CALL DELAY
    MOVLW B'01000000'
    MOVWF PORTB
    CALL DELAY
    MOVLW B'10000000'
    MOVWF PORTB
    CALL DELAY
    CLRF PORTB
    
    
    MOVLW B'00000001'
    MOVWF PORTC
    CALL DELAY
    MOVLW B'00000010'
    MOVWF PORTC
    CALL DELAY
    MOVLW B'00000100'
    MOVWF PORTC
    CALL DELAY
    MOVLW B'00010000'
    MOVWF PORTC
    CALL DELAY
    MOVLW B'00100000'
    MOVWF PORTC
    CALL DELAY
    MOVLW B'01000000'
    MOVWF PORTC
    CALL DELAY
    MOVLW B'10000000'
    MOVWF PORTC
    CALL DELAY
    CLRF PORTC
    
    
    MOVLW B'00000001'
    MOVWF PORTD
    CALL DELAY
    MOVLW B'00000010'
    MOVWF PORTD
    CALL DELAY
    MOVLW B'00000100'
    MOVWF PORTD
    CALL DELAY
    MOVLW B'00001000'
    MOVWF PORTD
    CALL DELAY
    MOVLW B'00010000'
    MOVWF PORTD
    CALL DELAY
    MOVLW B'00100000'
    MOVWF PORTD
    CALL DELAY
    MOVLW B'01000000'
    MOVWF PORTD
    CALL DELAY
    MOVLW B'10000000'
    MOVWF PORTD
    CALL DELAY
    CLRF PORTD
    
    MOVLW B'00000001'
    MOVWF PORTE
    CALL DELAY
    MOVLW B'00000010'
    MOVWF PORTE
    CALL DELAY
    MOVLW B'00000100'
    MOVWF PORTE
    CALL DELAY
    MOVLW B'00001000'
    MOVWF PORTE
    CALL DELAY
    CLRF PORTE
    
 GOTO AGAIN

 DELAY:
    MOVLW D'8'
    MOVWF Loop3

    JUMP3: MOVLW D'48'
    MOVWF Loop2

    JUMP2: MOVLW D'125'
    MOVWF Loop1

    JUMP1: DECFSZ Loop1
    GOTO JUMP1

    DECFSZ Loop2
    GOTO JUMP2

    DECFSZ Loop3
    GOTO JUMP1

 RETURN
    
END  


==============================================================================
LAB 2a

// PIC18F4550 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1L
#pragma config PLLDIV = 1       // PLL Prescaler Selection bits (No prescale (4 MHz oscillator input drives PLL directly))
#pragma config CPUDIV = OSC1_PLL2// System Clock Postscaler Selection bits ([Primary Oscillator Src: /1][96 MHz PLL Src: /2])
#pragma config USBDIV = 1       // USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1) (USB clock source comes directly from the primary oscillator block with no postscale)

// CONFIG1H
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator (HS))
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
#pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = OFF        // Brown-out Reset Enable bits (Brown-out Reset disabled in hardware and software)
#pragma config BORV = 3         // Brown-out Reset Voltage bits (Minimum setting 2.05V)
#pragma config VREGEN = OFF     // USB Voltage Regulator Enable bit (USB voltage regulator disabled)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config CCP2MX = ON      // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
#pragma config PBADEN = OFF     // PORTB A/D Enable bit (PORTB<4:0> pins are configured as digital I/O on Reset)
#pragma config LPT1OSC = OFF    // Low-Power Timer 1 Oscillator Enable bit (Timer1 configured for higher power operation)
#pragma config MCLRE = ON       // MCLR Pin Enable bit (MCLR pin enabled; RE3 input pin disabled)

// CONFIG4L
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config LVP = ON         // Single-Supply ICSP Enable bit (Single-Supply ICSP enabled)
#pragma config ICPRT = OFF      // Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit (ICPORT disabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000800-001FFFh) is not code-protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) is not code-protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) is not code-protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) is not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) is not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM is not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000800-001FFFh) is not write-protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) is not write-protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) is not write-protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) is not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) are not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot block (000000-0007FFh) is not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM is not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000800-001FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) is not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot block (000000-0007FFh) is not protected from table reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.



#include <xc.h>

void delay (int preload);


void main (void)
{
    TRISD = 0;            
    T0CON  = 0B00000011;  
    PORTD = 0x55;
    
    while(1)
    {
        LATD = ~LATD;
        delay(3036);
    }
}

void delay (int preload)
{
    int i,j;
    for(i=0; i<preload; i++)
        for (j=0; j<70; j++);
}

============================================================================
LAB 2b

#include <xc.h>

void main (void)
{
    TRISD = 0;            
    T0CON  = 0B01101000;  
    PORTD = 0;
    TMR0L = 0;
    
    TMR0ON=1;
    
    while(1)
    {
        PORTD =TMR0L;
    }
}

=============================================================================
lab 3
#include <xc.h>

unsigned char count = 0;

void __interrupt () ISR(void)
{
    if(INT0IF == 1)
        count ++;
    else if(INT1IF == 1)
        count --;
    INT0IF = 0;
    INT1IF = 0;
}



void main (void)
{
    TRISB = 0x0FF;            
    TRISD = 0; 
    PORTD = 0;
    GIE    = 1;
    INT0IE = 1;
    INT1IE = 1;
    TMR0ON=1;
    
    while(1)
    {   
        PORTC = count;
        if (count>0)
            RD0 = 1;
        else 
            RD0 = 0;
        if (count >= 20)
            RD1 = 1;
        else
            RD1 = 0;
    }
}

===============================================================================
lab 4


#include <xc.h>

void __interrupt () ISR(void)
{
    if (CHS0 == 0 && CHS1 == 0)
    {
        PORTB = ADRESH;
        CHS0 = 1;
    }
    
    else if (CHS0 == 1 && CHS1 == 0)
    {
        PORTC = ADRESH;
        CHS0 = 0;
        CHS1 = 1;
    }
    
    else if (CHS0 == 0 && CHS1 == 1)
    {
        PORTD = ADRESH;
        CHS0 = 0;
        CHS1 = 0;
    }
    
    ADIF = 0;
    GODONE = 1;
}

void main (void)
{
    TRISB = 0;
    TRISC = 0;
    TRISD = 0;
    
    PORTB = 0;
    PORTC = 0;
    PORTD = 0;
    
    TRISA0 = 1;
    TRISA1 = 1;
    TRISA2 = 1;
    
    ADCON0 = 0B00000001;
    ADCON1 = 0B00001100;
    ADCON2 = 0B00010010;
    
    
    GIE = 1;
    PEIE = 1;
    ADIE = 1;
    
    GODONE = 1;
    
    while(1);
}

===============================================================================
lab 5 PART 1

#include <xc.h>

void __interrupt () ISR(void)
{
    if (CHS0 == 1)
    {
        CHS0 = 0;
        CCPR1L = ADRESH;
    }
    
    else if (CHS0 == 0)
    {
        CHS0 = 1;
        CCPR2L = ADRESH;
    }
        
    ADIF = 0;
    GODONE = 1;
}


void main (void)
{
    TRISC1= 0;
    TRISC2 = 0;
    TRISA0 = 1;
    TRISA1 = 1;
    
    CCP1CON = 0B00001100;
    CCP2CON = 0B00001100;
    T2CON = 0B00000000;
    
    
    ADCON0 = 0B00000001;
    ADCON1 = 0B00001100;
    ADCON2 = 0B00010010;
    
    
    GIE = 1;
    PEIE = 1;
    ADIE = 1;
    
    PR2 = 249;
    TMR2ON = 1;
    GODONE = 1;
    
    while(1);
}


===============================================================================
LAB 5 PART 2



#include <xc.h>
void __interrupt () ISR(void)
{
    TMR1 = 0;
    CCPR1L = CCPR1 + 11;
    PORTB = CCPR1L;
    PORTD = CCPR1H;
    CCP1IF = 0;
    
}


void main (void)
{
    TRISC2 = 1;                     //CCP1 configured as input
    TRISB = 0;
    TRISD = 0;
    
    PORTB = 0;
    PORTD = 0;
    
    CCP1CON=0B00000100;		
    T1CON=0B10000000;	
    
    GIE = 1;
    PEIE = 1;
    CCP1IE = 1;
    TMR1ON = 1;	  
  
    while(1);
}


================================================================================

LAB 5 PART 3

#include <xc.h>

void __interrupt () ISR(void)
{
    TMR3 = 0;
    CCP2IF = 0;    
}

void main (void)
{
    TRISC1 = 0;

    CCP2CON=0B00000010;		
    T3CON=0B10001000;
    
    CCPR2H=0;
    CCPR2L=14;
    
    GIE = 1;
    PEIE = 1;
    CCP2IE = 1;
      
    TMR3ON = 1;	  
  
    while(1);
}

================================================================================

LAB 6 PART 1



#include <xc.h>

unsigned char count = 0;
unsigned char value= 0;
unsigned char units = 0;
unsigned char tens = 0;
unsigned char hund = 0;

void __interrupt () ISR(void)
{
    if (ADIF == 1)
    {
        ADIF = 0;
        value = ADRESH;
        
        hund = value/100;
        hund = hund + 48;
        value = value%100;
        tens = value/10;
        tens = tens + 48;
        units = value%10;
        units = units + 48;
        
        TXIF = 0;
        TXREG = hund;
        while (TXIF ==0);
        
        TXIF = 0;
        TXREG = tens;
        while (TXIF ==0);
        
        TXIF = 0;
        TXREG = units;
        while (TXIF ==0); 
        
        TXIF = 0;
        TXREG = '\r';
        while (TXIF ==0);
        
        TXIF = 0;
        
        GODONE = 1;
    }
    
    if (TMR0IF == 1 )
    {
        count = TMR1L;
        count = count/5;            //delay 5 seconds. value to be known of 1 seconds
        
        hund = count/100;
        hund = hund + 48;
        count = count%100;
        tens = count/10;
        tens = tens + 48;
        units = count%10;
        units = units + 48;
        
        TXREG = '\r';
        while (TXIF ==0);
        TXIF = 0;
        
        TXREG = '\r';
        while (TXIF ==0);
        TXIF = 0;
        
        TXREG = hund;
        while (TXIF ==0);
        TXIF = 0;
        
        TXREG = tens;
        while (TXIF ==0);
        TXIF = 0;
        
        TXREG = units;
        while (TXIF ==0);
        TXIF = 0;
        
        TXREG = '\r';
        while (TXIF ==0);
        TXIF = 0;
        
        while (1);
    }
    
}


void main (void)
{
    TRISA0 = 1;
    
    ADCON0 = 0B00000001;
    ADCON1 = 0B00001101;
    ADCON2 = 0B00010010;
    
    T0CON = 0B00000110;
    T1CON = 0B10000010;
    TMR0 = 26474;
    TMR1 = 0; 
    
    GIE = 1; 
    PEIE = 1;
    TMR0IE = 1;
    ADIE = 1;
    
    SPEN = 1;
    TXEN = 1;
    SYNC = 0;
    BRGH = 1;
    CREN = 1;
    SPBRG = 25;
    TXIF = 0;
    
    TMR1ON = 1;
    TMR0ON = 1;
    
    GODONE = 1;
  
    while(1);
}

============================================================================

lab 6 part 2

#include <xc.h>


#define ldata PORTB					// LCD
#define rs RE2
#define rw RE1
#define en RE0

int data='0';
int x=0;

void lcdcmd(int value);
void lcddata(int value);
void MSDelay(int time);

void main(void)
{
SPEN=1;
SYNC=0;
BRGH=1;
TRISD=0;
CREN=1;
SPBRG=25; //Baud Rate = FOSC/(16 (X + 1)) where X is SPBRG, 25 for 9600 for 4MHX osc

ADCON1 = 0B00001111;
TRISB=0;
TRISE=0;
	    
en=0;
MSDelay(50);
   
lcdcmd(0x38);
MSDelay(5);
    
lcdcmd(0x0E);
MSDelay(5);
    
lcdcmd(0x01);
MSDelay(5);
    
lcdcmd(0x06);
MSDelay(5);
    
lcdcmd(0x80);
MSDelay(5);
    
while(1)
	{
        while(RCIF==0);
        lcddata(RCREG);
        MSDelay(2);
	}
}

void lcdcmd(int value)
	{
		ldata=value;
		rs=0;
		rw=0;
		en=1;
		MSDelay(2);
		en=0;
	}

	void lcddata(int value)
	{
		ldata=value;
		rs=1;
		rw=0;
		en=1;
		MSDelay(2);
		en=0;
	}

	void MSDelay(int time)
	{
		int i,j;
		for(i=0;i<time;i++)
		for(j=0;j<135;j++);
	}






